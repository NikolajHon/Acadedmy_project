openapi: 3.0.0
info:
  title: Študentské fórum FSA
  version: 1.0.0
  description: API pre správu diskusných príspevkov a úloh k lekciám.

paths:
  /courses:
    get:
      summary: Get all courses
      operationId: getAllCourses
      tags:
        - Course
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoursesResponse'
    post:
      summary: Create new course
      operationId: createCourse
      tags:
        - Course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created

  /courses/{id}/lessons:
    get:
      summary: Get lessons by course ID
      operationId: getLessonsByCourseId
      tags:
        - Lesson
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of lessons for the course
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lesson'
        '404':
          description: Course not found

  /lessons:
    post:
      summary: Create new lesson
      operationId: createLesson
      tags:
        - Lesson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLessonRequest'
      responses:
        '201':
          description: Lesson created

  /lessons/{lessonId}/assignments:
    get:
      summary: Get assignments for a lesson
      operationId: getAssignmentsByLesson
      tags:
        - Assignment
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of assignments for the lesson
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
        '404':
          description: Lesson not found
    post:
      summary: Create new assignment under a lesson
      operationId: createAssignment
      tags:
        - Assignment
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignmentRequest'
      responses:
        '201':
          description: Assignment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'

  /assignments/{assignmentId}:
    get:
      summary: Get an assignment by ID
      operationId: getAssignmentById
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Assignment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
    put:
      summary: Update an assignment
      operationId: updateAssignment
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssignmentRequest'
      responses:
        '200':
          description: Assignment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '404':
          description: Assignment not found
    delete:
      summary: Delete an assignment
      operationId: deleteAssignment
      tags:
        - Assignment
      parameters:
        - name: assignmentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Assignment deleted
        '404':
          description: Assignment not found

  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'   # ← тут ссылка!
      responses:
        '201':
          description: User created

  /users/{userId}/courses/{courseId}:
    post:
      summary: Enroll user to course
      operationId: enrollUserToCourse
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: courseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User enrolled to course
        '404':
          description: User or Course not found

  /questions:
    post:
      summary: Create new question
      operationId: createQuestion
      tags:
        - Discussion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid input

components:
  schemas:
    CreateCourseRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string

    CreateLessonRequest:
      type: object
      required:
        - title
        - content
        - courseId
      properties:
        title:
          type: string
        content:
          type: string
        courseId:
          type: integer
          format: int64

    CreateAssignmentRequest:
      type: object
      required:
        - description
        - templateCode
        - expectedOutput
        - outputType
      properties:
        description:
          type: string
        templateCode:
          type: string
        expectedOutput:
          type: string
        outputType:
          $ref: '#/components/schemas/AssignmentOutputType'

    UpdateAssignmentRequest:
      allOf:
        - $ref: '#/components/schemas/CreateAssignmentRequest'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    Assignment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        templateCode:
          type: string
        expectedOutput:
          type: string
        outputType:
          $ref: '#/components/schemas/AssignmentOutputType'

    AssignmentOutputType:
      type: string
      enum:
        - STRING
        - INT
        - JSON
      description: Тип ожидаемого вывода для автоматической проверки

    Lesson:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        courseId:
          type: integer
          format: int64

    Course:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        lessons:
          type: array
          items:
            $ref: '#/components/schemas/Lesson'

    CreateUserRequest:                                 # ← вот он
      type: object
      required:
        - givingName
        - familyName
        - email
        - role
      properties:
        givingName:
          type: string
        familyName:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - Student
            - Teacher

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        givingName:
          type: string
        familyName:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
            - Student
            - Teacher
        rating:
          type: integer
          format: int32
          description: Рейтинг пользователя
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    CoursesResponse:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'

    UsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'

    CreateQuestionRequest:
      type: object
      required:
        - question_body
      properties:
        question_body:
          type: string
        answer:
          $ref: '#/components/schemas/Answer'

    Answer:
      type: object
      properties:
        id:
          type: integer
          format: int64
        answer_body:
          type: string

    Question:
      type: object
      properties:
        id:
          type: integer
          format: int64
        question_body:
          type: string
        answer:
          $ref: '#/components/schemas/Answer'
